<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用jsdeliver来加速hexo博客</title>
    <url>/2020/03/10/%E4%BD%BF%E7%94%A8jsdeliver%E6%9D%A5%E5%8A%A0%E9%80%9Fhexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/%E4%BD%BF%E7%94%A8jsdeliver%E6%9D%A5%E5%8A%A0%E9%80%9Fhexo%E5%8D%9A%E5%AE%A2/" alt=""></p>
<a id="more"></a>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/%E4%BD%BF%E7%94%A8jsdeliver%E6%9D%A5%E5%8A%A0%E9%80%9Fhexo%E5%8D%9A%E5%AE%A2/" alt=""></p>
]]></content>
      <tags>
        <tag>pat</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习1补遗</title>
    <url>/2020/03/10/Linux%E5%AD%A6%E4%B9%A01%E8%A1%A5%E9%81%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/photo/%E3%80%8E%E6%9C%80%E5%BE%8C%E3%81%AE%E4%B8%80%E5%91%BD%E3%81%BE%E3%81%A7%E3%80%8F.jpg" alt=""></p>
<h1 id="上次的重点和补充"><a href="#上次的重点和补充" class="headerlink" title="上次的重点和补充"></a>上次的重点和补充</h1><a id="more"></a>




<h2 id="上节课"><a href="#上节课" class="headerlink" title="上节课"></a>上节课</h2><p>文件在哪的两张表要记住<br>其中重点为var mnt usr lib proc<br>用户私有目录 ~<br>. 当前目录<br>.. 上级目录</p>
<p>符号链接 路径 单独的编号 前面有个l<br>硬链接 inode编号一模一样 </p>
<p>find</p>
<p>*任意字符<br>？单个字符<br>-name 选项</p>
<p>虚拟机下进入字符  ctrl+alt+f2</p>
<p>退出 alt+f1</p>
<p>fg 挂在前台</p>
<p>ctrl+z 挂在后台</p>
<p>tar -jxvf 名字.tar.bz2</p>
<p>tar -jcvf 名字.tar.bz2 文件</p>
<h2 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h2><h3 id="alias-给命令另外取一个名字"><a href="#alias-给命令另外取一个名字" class="headerlink" title="alias:给命令另外取一个名字"></a>alias:给命令另外取一个名字</h3><p>alias cp=’cp -i’<br>alias ll=’ls -l –color=tty’<br>alias dir=’ls’<br>alias type=’cat’<br>alias confwww=’vi /usr/local/apache/conf/httpd.conf<br>alias<br>unalias: 取消先前用alias定义的别名<br>unalias dir</p>
<h3 id="alias使用说明"><a href="#alias使用说明" class="headerlink" title="alias使用说明"></a>alias使用说明</h3><ul>
<li><p>在定义别名时,等号两边不允许有空格存在,否则bash不能确定用户的意图.若命令中包含空格或其他特殊字符串则必须使用引号</p>
</li>
<li><p>如果用户需要别名的定义在每次登录时均有效,可将其写入用户私有目录下的.bashrc文件中</p>
</li>
<li><p>如果别名与系统命令同名,则别名优先于系统命令,如想使用原系统命令,则在命令前添加’&#39;字符</p>
</li>
</ul>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>Linux标准的输入/输出设备端口:<br>  stdin 标准输入设备端口<br>  stdout 标准输出设备端口<br>  stderr 标准错位设备端口<br>默认的标准输出端口和标准错位端口为控制台的<strong>屏幕</strong>;默认的标准输入端口是控制台的键盘.<br>所谓重定向,就是<strong>不使用系统的标准输入,标准输出或标准错位端口,而进行重新的指定</strong>.</p>
<h3 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h3><p>&lt;  输入重定向<br>&lt;&lt;!…!   输入重定向特例, 即here文件</p>
<blockquote>
<p>或&gt;&gt;    输出重定向<br>2&gt;   错误重定向<br>&amp;&gt;   同时实现输出重定向和错误重定向</p>
</blockquote>
<h3 id="重定向举例"><a href="#重定向举例" class="headerlink" title="重定向举例"></a>重定向举例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -l &#x2F;tmp &gt;dir 将ls命令输出的结果存到当前目录中的dir文件中</span><br><span class="line">ls -l &#x2F;etc &gt;&gt;dir 将ls命令输出的结果追加到dir文件中</span><br><span class="line">rpm -ql apache &gt;apache.list 获得apache软件包的安装文件清单并存到指定文件中</span><br><span class="line">echo “Hello world!”&gt;message 用echo命令和输出重定向建立简单的文本文件</span><br><span class="line">myprogram 2&gt;err_file  将命令myprogram的错误信息保存到文件中</span><br><span class="line">myprogram &amp;&gt;output_file 将命令myprogram的错误信息和输出信息都保存到文件中</span><br><span class="line"></span><br><span class="line">wc &lt;&lt;!</span><br><span class="line">&gt;This text forms the content of heredocument</span><br><span class="line">&gt;which continues until the end of delimiter</span><br><span class="line">&gt;!  将命令随后输入的文本作为wc命令的输入</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;! &gt;mytext</span><br><span class="line">&gt;This text forms the content of heredocument</span><br><span class="line">&gt;which continues until the end of delimiter</span><br><span class="line">&gt;!</span><br><span class="line"> 利用cat命令,here文档和输出重定向建立简单的文本文件</span><br></pre></td></tr></table></figure>

<h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>Shell提供管道命令”|”, 将一些命令前后 衔接在一起,形成一个管道线:<br>命令1|命令2|……|命令n<br>每个命令的输出作为下一条命令的输入,管道线中的命令总是从左到右顺序执行的,管道线是单向的</p>
<h3 id="管道与重定向的区别"><a href="#管道与重定向的区别" class="headerlink" title="管道与重定向的区别"></a>管道与重定向的区别</h3><p>输入重定向导致一个程序的标准输入来自某个文件,输出重定向是将一个程序的标准输出写到一个文件中<br>管道是直接将一个<strong>程序</strong>的标准输出于另一个<strong>程序</strong>的标准输入相连接,不需要经过任何中间文件</p>
<h3 id="管道使用举例"><a href="#管道使用举例" class="headerlink" title="管道使用举例"></a>管道使用举例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -Rl &#x2F;etc |more</span><br><span class="line">cat &#x2F;etc&#x2F;passwd |more</span><br><span class="line">cat &#x2F;etc&#x2F;passwd |wc</span><br><span class="line">cat &#x2F;etc&#x2F;passwd |grep lrj 查看是否存在lrj用户账号</span><br><span class="line">gzip -dc xyz.tar.gz|tar -xvf 解压缩tar名为xyz.tar.gz的软件包</span><br><span class="line">man bash | col -b &gt;bash.txt 把man的信息存为文本文件</span><br><span class="line">ls -l *|grep “^-”|wc -l 计算当前目录下的文件数和目录数</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>pat乙级——1061</title>
    <url>/2020/03/09/pat%E4%B9%99%E7%BA%A7%E2%80%94%E2%80%941061/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/pat%E4%B9%99%E7%BA%A7%E2%80%94%E2%80%941061/%E8%98%87.jpg" alt=""></p>
<a id="more"></a>

<h1 id="1061-判断题-15分"><a href="#1061-判断题-15分" class="headerlink" title="1061 判断题 (15分)"></a>1061 判断题 (15分)</h1><p>判断题的评判很简单，本题就要求你写个简单的程序帮助老师判题并统计学生们判断题的得分。</p>
<h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入在第一行给出两个不超过 100 的正整数 N 和 M，分别是学生人数和判断题数量。第二行给出 M 个不超过 5 的正整数，是每道题的满分值。第三行给出每道题对应的正确答案，0 代表“非”，1 代表“是”。随后 N 行，每行给出一个学生的解答。数字间均以空格分隔。</p>
<h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>按照输入的顺序输出每个学生的得分，每个分数占一行。</p>
<h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><p>3 6<br>2 1 3 3 4 5<br>0 0 1 0 1 1<br>0 1 1 0 0 1<br>1 0 1 0 1 0<br>1 1 0 0 1 1</p>
<h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><p>13<br>11<br>12</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">int</span> value[m];</span><br><span class="line">    <span class="keyword">int</span> ans[m];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;value[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> score=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">            <span class="keyword">if</span>(temp==ans[j])</span><br><span class="line">            &#123;</span><br><span class="line">                score+=value[j];</span><br><span class="line"><span class="comment">//                cout&lt;&lt;j&lt;&lt;"QAQAQAQ"&lt;&lt;value[j]&lt;&lt;endl;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        printf("%d",score/n);</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;score&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>出现问题：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,score);</span><br></pre></td></tr></table></figure>

<p>将\n写到了外面，这样就变成了score除以n了，还想了半天hh。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/pat%E4%B9%99%E7%BA%A7%E2%80%94%E2%80%941061/1.png" alt=""></p>
]]></content>
      <tags>
        <tag>pat</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>pat乙级——1060</title>
    <url>/2020/03/09/pat%E4%B9%99%E7%BA%A7%E2%80%94%E2%80%941060/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/pat%E4%B9%99%E7%BA%A7%E2%80%94%E2%80%941060/1.jfif" alt=""></p>
<a id="more"></a>
<h2 id="1060-爱丁顿数-25分"><a href="#1060-爱丁顿数-25分" class="headerlink" title="1060 爱丁顿数 (25分)"></a>1060 爱丁顿数 (25分)</h2><p>英国天文学家爱丁顿很喜欢骑车。据说他为了炫耀自己的骑车功力，还定义了一个“爱丁顿数” E ，即满足有 E 天骑车超过 E 英里的最大整数 E。据说爱丁顿自己的 E 等于87。</p>
<p>现给定某人 N 天的骑车距离，请你算出对应的爱丁顿数 E（≤N）。</p>
<h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入第一行给出一个正整数 N (≤10^5 )，即连续骑车的天数；第二行给出 N 个非负整数，代表每天的骑车距离。</p>
<h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>在一行中给出 N 天的爱丁顿数。</p>
<h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><p>10<br>6 7 6 9 3 10 8 2 7 8</p>
<h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><p>6</p>
<h2 id="第一次尝试"><a href="#第一次尝试" class="headerlink" title="第一次尝试"></a>第一次尝试</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> ride[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">        ride[i]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ride,ride+n);</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="comment">//        cout&lt;&lt;ride[i];</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>,cnt=<span class="number">0</span>;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ride[j]&gt;ride[i])&#123;</span><br><span class="line">                num = n-j;</span><br><span class="line">                cnt = j-i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num==ride[i]&amp;&amp;num&gt;<span class="built_in">max</span>)&#123;</span><br><span class="line">            <span class="built_in">max</span> = num;</span><br><span class="line">            i=i+cnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="built_in">max</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/pat%E4%B9%99%E7%BA%A7%E2%80%94%E2%80%941060/1.png" alt=""></p>
<h3 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h3><ul>
<li>怎么样存放这个数据，是存放个数还是存放数据本身</li>
<li>怎么排序。用到algorithm的sort，sort（指针1，指针2，cmp方法）</li>
</ul>
<h2 id="第二次"><a href="#第二次" class="headerlink" title="第二次"></a>第二次</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> ride[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">        ride[i]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ride,ride+n,cmp1);</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ride[i]&gt;i+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">max</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="built_in">max</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul>
<li>从大到小怎么排序，新建一个cmp比较函数</li>
<li>题目意思的理解<br>E天超过E公里，这个E是变化的。<br>1天超过1公里<br>2天超过2公里<br>3天超过3公里<br>。。<br>不是定死的<br><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/pat%E4%B9%99%E7%BA%A7%E2%80%94%E2%80%941060/2.png" alt=""></li>
</ul>
]]></content>
      <tags>
        <tag>pat</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言实验1</title>
    <url>/2020/03/09/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E9%AA%8C1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E9%AA%8C1/1.png" alt=""></p>
<a id="more"></a>


<h2 id="1-求正-负余数（3分）"><a href="#1-求正-负余数（3分）" class="headerlink" title="1.求正/负余数（3分）"></a>1.求正/负余数（3分）</h2><p>题目内容：</p>
<p>在C语言中，如果被除数为负值，则对一个正数求余的时候，求出的余数也是一个负数。在某些场合下，我们需要求出它的正余数，例如：在C语言中有(-11)%5=-1，但是有时我们希望得到的余数不是-1，而是4。请编写程序计算(-11)%5的负余数和正余数。</p>
<p>以下为程序运行结果示例：<br>negative: -1<br>positive: 4</p>
<p>输入格式:无</p>
<p>输出格式：<br>负余数的输出格式：”negative: %d\n”<br>正余数的输出格式：”positive: %d\n”<br>为避免出现格式错误，请直接拷贝粘贴题目中给的格式字符串和提示信息到你的程序中。<br>时间限制：500ms内存限制：32000kb</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> negative = <span class="number">-11</span>%<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> positive = <span class="number">-11</span>%<span class="number">5</span>+<span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"negative: %d\n"</span>,negative);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"positive: %d\n"</span>,positive);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>典型白给题</p>
<h2 id="2-求一元二次方程的根（3分）"><a href="#2-求一元二次方程的根（3分）" class="headerlink" title="2.求一元二次方程的根（3分）"></a>2.求一元二次方程的根（3分）</h2><p>题目内容：</p>
<p>根据下面给出的求根公式，计算并输出一元二次方程的两个实根，要求精确到小数点后4位。程序中所有浮点数的数据类型均为float.<br><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E9%AA%8C1/2.jpg" alt=""><br>提示：</p>
<ol>
<li>计算平方根的数学函数为sqrt（）。</li>
<li>使用数学函数，需要在程序开头加上编译预处理指令 #include &lt;math.h&gt;</li>
</ol>
<p>以下为程序运行结果示例<br>x1=-0.5000<br>x2=-1.0000</p>
<p>输入格式: 无</p>
<p>输出格式：<br>      “x1=%.4f\n”<br>      “x2=%.4f\n”</p>
<p>为避免出现格式错误，请直接拷贝粘贴题目中给的格式字符串和提示信息到你的程序中。<br>时间限制：500ms内存限制：32000kb</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a =<span class="number">2</span>,b=<span class="number">3</span>,c=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">float</span> x1 = (<span class="built_in">sqrt</span>(b*b<span class="number">-4</span>*a*c)-b)/(<span class="number">2</span>*a);</span><br><span class="line">    <span class="keyword">float</span> x2 = (-b-<span class="built_in">sqrt</span>(b*b<span class="number">-4</span>*a*c))/(<span class="number">2</span>*a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x1=%.4f\n"</span>,x1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x2=%.4f\n"</span>,x2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实牵涉到float和int的转换，这样写是不对的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a =<span class="number">2</span>,b=<span class="number">3</span>,c=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">float</span> x1 = (-b/(<span class="number">2</span>*a))+(<span class="built_in">sqrt</span>(b*b<span class="number">-4</span>*a*c)/(<span class="number">2</span>*a));</span><br></pre></td></tr></table></figure>
<p><strong>前面是整数，丢失精度</strong></p>
]]></content>
      <tags>
        <tag>实验</tag>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>pat乙级——1059</title>
    <url>/2020/03/08/pat%E4%B9%99%E7%BA%A7%E2%80%94%E2%80%941059/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="1059-C语言竞赛-20分"><a href="#1059-C语言竞赛-20分" class="headerlink" title="1059 C语言竞赛 (20分)"></a>1059 C语言竞赛 (20分)</h1><p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/pat%E4%B9%99%E7%BA%A7%E2%80%94%E2%80%941059/2.jpg" alt=""></p>
<a id="more"></a>
<p>C 语言竞赛是浙江大学计算机学院主持的一个欢乐的竞赛。既然竞赛主旨是为了好玩，颁奖规则也就制定得很滑稽：</p>
<p>0、冠军将赢得一份“神秘大奖”（比如很巨大的一本学生研究论文集……）。<br>1、排名为素数的学生将赢得最好的奖品 —— 小黄人玩偶！<br>2、其他人将得到巧克力。<br>给定比赛的最终排名以及一系列参赛者的 ID，你要给出这些参赛者应该获得的奖品。</p>
<h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>输入第一行给出一个正整数 N（≤10^4），是参赛者人数。随后 N 行给出最终排名，每行按排名顺序给出一位参赛者的 ID（4 位数字组成）。接下来给出一个正整数 K 以及 K 个需要查询的 ID。</p>
<h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>对每个要查询的 ID，在一行中输出 ID: 奖品，其中奖品或者是 Mystery Award（神秘大奖）、或者是 Minion（小黄人）、或者是 Chocolate（巧克力）。如果所查 ID 根本不在排名里，打印 Are you kidding?（耍我呢？）。如果该 ID 已经查过了（即奖品已经领过了），打印 ID: Checked（不能多吃多占）。</p>
<h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">1111</span><br><span class="line">6666</span><br><span class="line">8888</span><br><span class="line">1234</span><br><span class="line">5555</span><br><span class="line">0001</span><br><span class="line">6</span><br><span class="line">8888</span><br><span class="line">0001</span><br><span class="line">1111</span><br><span class="line">2222</span><br><span class="line">8888</span><br><span class="line">2222</span><br></pre></td></tr></table></figure>
<h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8888: Minion</span><br><span class="line">0001: Chocolate</span><br><span class="line">1111: Mystery Award</span><br><span class="line">2222: Are you kidding?</span><br><span class="line">8888: Checked</span><br><span class="line">2222: Are you kidding?</span><br></pre></td></tr></table></figure>
<h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a>初次尝试</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(a); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a%i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inVector</span><span class="params">(<span class="keyword">int</span> t,<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; a[i]&lt;&lt;"!!!!"&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(t==a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; i&lt;&lt;"QAQ"&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">return</span> i ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt;"******"&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num,best,num2,cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin &gt;&gt; num &gt;&gt;best;</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;num,&amp;best);</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; sec;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; help(num,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">        <span class="comment">//cin&gt;&gt;temp;</span></span><br><span class="line">        sec.push_back(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num2);</span><br><span class="line">    <span class="comment">//cin &gt;&gt; num2;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="comment">//cin&gt;&gt;temp;</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%04d"</span>, temp);</span><br><span class="line">        <span class="keyword">if</span>(temp==best&amp;&amp;cnt==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt--;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">": Mystery Award\n"</span>);</span><br><span class="line">            <span class="comment">//cout&lt;&lt;": Mystery Award"&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(temp==best&amp;&amp;cnt!=<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">": Checked\n"</span>);</span><br><span class="line">            <span class="comment">//cout&lt;&lt;": Checked"&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// cout&lt;&lt; inVector(temp,sec)&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span>(inVector(temp,sec)&lt;=sec.<span class="built_in">size</span>()<span class="number">-1</span>&amp;&amp;help[inVector(temp,sec)]==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(isPrime(inVector(temp,sec)+<span class="number">2</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//cout&lt;&lt;isPrime(inVector(temp,sec)+2)&lt;&lt;"QAQ";</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">": Minion\n"</span>);</span><br><span class="line">                    <span class="comment">//cout&lt;&lt;": Minion"&lt;&lt;endl;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">//cout&lt;&lt;": Chocolate"&lt;&lt;endl;</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">": Chocolate\n"</span>);</span><br><span class="line">                help[inVector(temp,sec)]--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(inVector(temp,sec)&lt;=sec.<span class="built_in">size</span>()<span class="number">-1</span>&amp;&amp;help[inVector(temp,sec)]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//cout&lt;&lt;inVector(temp,sec)&lt;&lt;sec.size()-1&lt;&lt;"QAQ"&lt;&lt;help[inVector(temp,sec)];</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">": Checked\n"</span>);</span><br><span class="line">                <span class="comment">//cout&lt;&lt;": Checked"&lt;&lt;endl;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//cout&lt;&lt;inVector(temp,sec)&lt;&lt;"QAQ"&lt;&lt;inVector(temp,sec);</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">": Are you kidding?\n"</span>);</span><br><span class="line">                <span class="comment">//cout&lt;&lt;": Are you kidding?"&lt;&lt;endl;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/pat%E4%B9%99%E7%BA%A7%E2%80%94%E2%80%941059/1.png" alt=""></p>
<h3 id="暴露的问题"><a href="#暴露的问题" class="headerlink" title="暴露的问题"></a>暴露的问题</h3><ul>
<li>变量要看清，在带入函数时一定要注意是哪个变量</li>
<li>&lt;= 还是！=分析清楚</li>
<li>Vector创建方式 Vector<int>(num,value)，前面是多少个，后面是取得值，个值</li>
<li>素数判断，sqrt（）</li>
<li>printf(%04d,&amp;a)，这样就可以输出前面为0的四位</li>
<li>要使用｛｝，不然debug太麻烦</li>
<li>依然存在的问题：超时</li>
</ul>
<hr>
<h3 id="看了柳婼的想法："><a href="#看了柳婼的想法：" class="headerlink" title="看了柳婼的想法："></a>看了柳婼的想法：</h3><ul>
<li>数据存储的方式<br>  第一个直接使用int数组，快，最大值已经定下来了，怎么确定是第几位很关键<br>  第二个使用set，这个我觉得无所谓</li>
<li>判断的逻辑顺序<br>  先判断这个人是否获奖<br>  在判断得到什么奖</li>
<li>判断数在set里面<br>   a.find()==a.end()，这是指针，不是索引<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; ss;</span><br><span class="line"><span class="keyword">if</span>(ss.<span class="built_in">find</span>(id) == ss.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    ss.insert(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="返工重做"><a href="#返工重做" class="headerlink" title="返工重做"></a>返工重做</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> reward[<span class="number">10000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(a); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a%i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num,num2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">        reward[temp] = i+<span class="number">1</span>; <span class="comment">// 注意什么意思</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num2);</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; mytry(num2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%04d"</span>, temp);</span><br><span class="line">        <span class="keyword">if</span>(reward[temp]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">": Are you kidding?\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(mytry.<span class="built_in">begin</span>(),mytry.<span class="built_in">end</span>(),temp)!=mytry.<span class="built_in">end</span>())&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">": Checked\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(reward[temp]==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">": Mystery Award\n"</span>);</span><br><span class="line">                    mytry.push_back(temp);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(isPrime(reward[temp]))&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">": Minion\n"</span>);</span><br><span class="line">                    mytry.push_back(temp);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">": Chocolate\n"</span>);</span><br><span class="line">                    mytry.push_back(temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第二次结果"><a href="#第二次结果" class="headerlink" title="第二次结果"></a>第二次结果</h3><p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/pat%E4%B9%99%E7%BA%A7%E2%80%94%E2%80%941059/2.png" alt=""></p>
<h3 id="遇到的问题："><a href="#遇到的问题：" class="headerlink" title="遇到的问题："></a>遇到的问题：</h3><ul>
<li>vector find怎么用<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(mytry.<span class="built_in">begin</span>(),mytry.<span class="built_in">end</span>(),temp)==mytry.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        mytry.push_back(temp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>一个测试点不过</li>
</ul>
<h2 id="第三次提交"><a href="#第三次提交" class="headerlink" title="第三次提交"></a>第三次提交</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; mytry;</span><br></pre></td></tr></table></figure>
<p>创建vector不能指定大小，原因估计是可能因此而产生与学生ID相同的数<br><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/pat%E4%B9%99%E7%BA%A7%E2%80%94%E2%80%941059/3.png" alt=""></p>
]]></content>
      <tags>
        <tag>pat</tag>
        <tag>c++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习1</title>
    <url>/2020/03/08/Linux%E5%AD%A6%E4%B9%A01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="第2章-Linux常用命令"><a href="#第2章-Linux常用命令" class="headerlink" title="第2章 Linux常用命令"></a>第2章 Linux常用命令</h1><p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/Linux%E5%AD%A6%E4%B9%A01/AK-02.jpg.webp" alt=""></p>
<a id="more"></a>

<h2 id="虚拟控制台"><a href="#虚拟控制台" class="headerlink" title="虚拟控制台"></a>虚拟控制台</h2><p>在多个虚拟控制台之间切换<br>    在字符方式下：Alt+F1 ~ Alt + F6<br>    在图形方式下：Ctrl+Alt+F1 ~ Ctrl+Alt+F6<br>切换到图形环境默认为Alt + F7或者Ctrl+Alt+F6</p>
<h2 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h2><p>1.输入logout<br>2.使用Ctrl＋D键</p>
<h2 id="关机与重新启动"><a href="#关机与重新启动" class="headerlink" title="关机与重新启动"></a>关机与重新启动</h2><p><strong>关机与重新启动的实质是切换运行级别</strong></p>
<h3 id="关机命令："><a href="#关机命令：" class="headerlink" title="关机命令："></a>关机命令：</h3><p>init 0<br>halt<br>shutdown -h +5</p>
<h3 id="重新启动命令："><a href="#重新启动命令：" class="headerlink" title="重新启动命令："></a>重新启动命令：</h3><p>init 6<br>reboot<br>shutdown -r +5</p>
<h3 id="shutdown-命令"><a href="#shutdown-命令" class="headerlink" title="shutdown 命令"></a>shutdown 命令</h3><p>－k 只是警告，不实际关机<br>－r 关机后重新启动<br>－h 关闭系统</p>
<h2 id="简单命令"><a href="#简单命令" class="headerlink" title="简单命令"></a>简单命令</h2><p>1．who  列出所有正在使用系统的用户、所用终端名和注册到系统的时间<br>2．echo    将命令行中的参数显示到标准输出（即屏幕）上<br>3．date    在屏幕上显示或设置系统的日期和时间<br>4．cal      显示公元1～9999年中任意一年或者任意一个月的日历<br>5．clear    清除屏幕上的信息<br>6．passwd    修改用户密码</p>
<h2 id="常用的信息显示命令"><a href="#常用的信息显示命令" class="headerlink" title="常用的信息显示命令"></a>常用的信息显示命令</h2><p>whoami 显示用户自己的身分<br>hostname 显示主机名称<br><strong>top 显示当前系统中耗费资源最多的进程</strong><br>du 显示指定文件已使用的磁盘空间的总量<br>df 显示文件系统磁盘空间的使用情况<br>free 显示当前内存和交换空间的使用情况<br>id 显示当前用户的id信息<br>ifconfig 显示网络接口信息<br>ifconfig<br>ifconfig eth0<br>ping 测试网络的连通性<br>ping 192.168.1.100<br>Ping –c 4  <a href="http://www.suda.edu.cn" target="_blank" rel="noopener">www.suda.edu.cn</a><br>netstat     显示网络状态信息<br>netstat -nr<br>locale 显示当前语言环境</p>
<h2 id="文件概念和文件类型"><a href="#文件概念和文件类型" class="headerlink" title="文件概念和文件类型"></a>文件概念和文件类型</h2><h3 id="文件系统的概念"><a href="#文件系统的概念" class="headerlink" title="文件系统的概念"></a>文件系统的概念</h3><p>1．文件与目录的定义<br>  文件系统 、文件、目录 、子目录、文件名、路径名、当前工作目录<br>2．文件结构<br>文件的成分——索引节点   数据</p>
<h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><p>1．普通文件<br>文本文件、数据文件、可执行的二进制程序<br>2．<strong>目录文件</strong><br>一种特别文件，利用它可以构成文件系统的分层树状结构<br>3．<strong>设备文件</strong><br>一种特别文件，用来标记各个设备驱动器。字符设备、块设备<br>4．符号链接文件<br>一种特殊文件，提供对其他文件的参照 </p>
<h3 id="常用设备文件说明"><a href="#常用设备文件说明" class="headerlink" title="常用设备文件说明"></a>常用设备文件说明</h3><ul>
<li>/dev/hd*    IDE硬件设备</li>
<li>/dev/sd*    SCSI硬件设备</li>
<li>/dev/lp*     并口设备</li>
<li>/dev/cua*    串口设备</li>
<li>/dev/tty*    终端设备</li>
<li>/dev/console    系统控制台</li>
<li>/dev/ippp*    ppp设备</li>
<li>/dev/isdn*    isdn设备</li>
</ul>
<h3 id="特殊设备"><a href="#特殊设备" class="headerlink" title="特殊设备"></a>特殊设备</h3><ul>
<li>/dev/null     空设备</li>
<li>/dev/zero     零设备</li>
<li>/dev/loop0    回送设备</li>
<li>/dev/ram0     虚拟磁盘设备</li>
</ul>
<h2 id="有关文件显示命令"><a href="#有关文件显示命令" class="headerlink" title="有关文件显示命令"></a>有关文件显示命令</h2><h3 id="1．cat-tac命令"><a href="#1．cat-tac命令" class="headerlink" title="1．cat / tac命令"></a>1．cat / tac命令</h3><p><strong>一般格式：     cat  [选项]  文件</strong><br>有两项功能：在标准输出上显示文件的内容；连接两个或多个文件<br>     如:       $  cat  f1  f2&gt;f3<br>常用选项：<br>    -b，–number-noblank  从1开始对所有非空输出行进行编号。<br>    -n，–number  从1开始对所有输出行编号。<br>    -s，–squeeze-blank  将多个相邻的空行合并成一个空行。<br>    –help  打印该命令用法，并退出，其返回码表示成功。 </p>
<h3 id="2．more命令"><a href="#2．more命令" class="headerlink" title="2．more命令"></a>2．more命令</h3><p><strong>一般格式：   more   [选项]   文件</strong><br>常用选项：<br>   -num，这个选项指定一个整数，表示一屏显示多少行。<br>   -d，在每屏的底部显示以下更友好的提示信息：</p>
<p>   -c或-p，不滚屏，在显示下一屏之前先清屏。<br>   -s，将文件中连续的空白行压缩成一个空白行显示。<br>   +/，该选项后的模式（Pattern）指定显示每个文件之前进行搜索的字符串。<br>   +num，从行号num开始。  </p>
<h3 id="3．less命令"><a href="#3．less命令" class="headerlink" title="3．less命令"></a>3．less命令</h3><p>less命令允许用户向前或向后浏览文件，而more命令只能向前浏览。</p>
<h3 id="4．head命令"><a href="#4．head命令" class="headerlink" title="4．head命令"></a>4．head命令</h3><p><strong>一般格式： head   [选项]   file</strong><br>选项：<br>-c，–bytes=[-]N<br>显示每个文件前面N个字节。如果数字N前面带有“-”，则分别显示每个文件除最后N个字节以外的所有内容。<br>-n，–lines=[-]N<br>显示指定文件的前面N行，而不是默认的10行。如果数字N前面带有“-”，则分别显示每个文件除最后N行以外的所有内容。<br>-q，-quiet，–silent  不显示给定文件的标题。<br>-v，–verbose  始终显示给定文件的标题。</p>
<h3 id="5-tail命令"><a href="#5-tail命令" class="headerlink" title="5. tail命令"></a>5. tail命令</h3><p><strong>一般格式： tail   [选项]  [file] …</strong><br>说明：tail命令在屏幕上显示指定文件的末尾10行<br>选项：<br>   -c，–bytes=N  输出最后N个字节。<br>   -f  当文件增长时输出附加的数据。<br>   -n，–lines=N  输出最后的N行，而不是默认的10行。<br>   -q，-quiet，–silent  不输出包含给定文件名的标题。<br>   -v，–verbose  始终输出包含给定文件名的标题。</p>
<h3 id="6．touch命令"><a href="#6．touch命令" class="headerlink" title="6．touch命令"></a>6．touch命令</h3><p><strong>一般格式： touch   [选项]   文件名  …</strong><br>说明：<br>touch命令将会修改指定文件的时间标签，把已存在文件的时间标签更新为系统当前的时间（默认方式），它们的数据将原封不动地保留下来。如果该文件尚未存在，则建立一个空的新文件。 </p>
<p>选项：<br>    -a  仅改变指定文件的存取时间。<br>    -c，–no-create  不创建任何文件。<br>    -m  仅改变指定文件的修改时间。<br>    -t  STAMP    使用STAMP指定的时间标签，而不是系统当前的时间 。</p>
<h2 id="匹配、排序及显示指定内容的命令"><a href="#匹配、排序及显示指定内容的命令" class="headerlink" title="匹配、排序及显示指定内容的命令"></a>匹配、排序及显示指定内容的命令</h2><h3 id="1．grep命令"><a href="#1．grep命令" class="headerlink" title="1．grep命令"></a>1．grep命令</h3><p><strong>一般格式：<br>grep  [选项] 查找模式 [文件名1，文件名2，…]<br>grep  [选项] [-e 查找模式| -f  文件] [文件名1，文件名2，…]</strong></p>
<p>说明：该命令用来在文本文件中<strong>查找指定模式的词或短语</strong>，并在标准输出上显示包括给定字符串模式的所有行。<br>常用选项：<br>    -E  将查找模式解释成扩展的正则表达式。<br>    -F  将查找模式解释成单纯的字符串。<br>    -b，–byte-offset  在输出的每一行前面显示包含匹配字符串的行在文件中的位置，用字节偏移量来表示。<br>    -c，–count  只显示文件中包含匹配字符串的行的总数。<br>    -f FILE  从文件FILE中获取模式，每行一个。空文件不含模式，因此，不做匹配。<br>    -i，–ignore-case  匹配比较时不区分字母的大小写。<br>    -R，-r，–recursive   以递归方式查询目录下的所有子目录中的文件。<br>    -n  在输出包含匹配模式的行之前，加上该行的行号（文件首行的行号为1）<br>    -v  只显示不包含匹配字符串的文本行。<br>    -x  只显示整个行都严格匹配的行。 </p>
<h3 id="2．sort命令"><a href="#2．sort命令" class="headerlink" title="2．sort命令"></a>2．sort命令</h3><p><strong>一般格式： sort   [选项]  文件列表</strong><br>说明：用来对文本文件的各行进行<strong>排序</strong><br>         排序比较是依据从输入文件的每一行中提取的一个或多个排序关键字进行的。<br>选项：<br>    -m，–merge  对已经排好序的文件统一进行合并，但不做排序。<br>    -c，–check  检查给定的文件是否已排好序，若没有，则显示出错消息，不做  排序。<br>    -u，–unique   与-c选项一起用，严格地按顺序检查；否则，对排序后的重复行只输出第一行。<br>    -o，–output=FILE  将排序输出放到该文件名所指定的文件中。如果该文件不存在，则创建一个新文件。<br>    还有一些改变排序规则的选项 </p>
<h3 id="3．uniq命令"><a href="#3．uniq命令" class="headerlink" title="3．uniq命令"></a>3．uniq命令</h3><p><strong>一般格式：uniq  [选项] [输入文件[输出文件]]</strong><br>说明：读取输入文件，比较相邻的行，*<em>去掉重复的行，只留下其中的一行。 *</em><br>选项：<br>    -c，–count   显示输出时，在每行的行首加上该行在文件中出现的次数。<br>    -d，–repeated   只显示重复行。<br>    -f, –skip-fields=N   忽略比较前N个字段。<br>    -s, –skip-chars=N   忽略比较前N个字符。<br>    -u，–unique   只显示文件中不重复的行。</p>
<h2 id="比较文件内容的命令"><a href="#比较文件内容的命令" class="headerlink" title="比较文件内容的命令"></a>比较文件内容的命令</h2><h3 id="1．comm命令"><a href="#1．comm命令" class="headerlink" title="1．comm命令"></a>1．comm命令</h3><p><strong>一般格式：comm  [-123]  file1  file2</strong><br>说明：comm命令对两个已经排好序的文件进行比较。<br>选项：<br>    -123    选项1，2和3分别表示不显示comm输出中的第一列、第二列和第三列。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost text]# cat aaa.txt </span><br><span class="line">aaa </span><br><span class="line">bbb </span><br><span class="line">ccc </span><br><span class="line">ddd </span><br><span class="line">eee </span><br><span class="line">111 </span><br><span class="line">222</span><br><span class="line">[root@localhost text]# cat bbb.txt</span><br><span class="line">bbb </span><br><span class="line">ccc </span><br><span class="line">aaa </span><br><span class="line">hhh </span><br><span class="line">ttt </span><br><span class="line">jjj</span><br></pre></td></tr></table></figure>
<p>comm比较</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost text]# comm aaa.txt bbb.txt </span><br><span class="line">aaa</span><br><span class="line">                bbb</span><br><span class="line">                ccc</span><br><span class="line">        aaa</span><br><span class="line">ddd</span><br><span class="line">eee</span><br><span class="line">111</span><br><span class="line">222</span><br><span class="line">        hhh</span><br><span class="line">        ttt</span><br><span class="line">        jjj</span><br><span class="line">第一列  第二列  第三列</span><br></pre></td></tr></table></figure>
<p><strong>输出的第一列只包含在 aaa.txt 中出现的列，第二列包含在 bbb.txt 中出现的列，第三列包含在 aaa.txt 和 bbb.txt 中都包含的列。</strong></p>
<h3 id="2．diff命令"><a href="#2．diff命令" class="headerlink" title="2．diff命令"></a>2．diff命令</h3><p><strong>一般格式：diff  [选项]  文件1  文件2</strong><br>说明：比较两个文本文件，并<strong>找出它们的不同。</strong><br>    该命令输出的一般形式如下:<br> n1  a  n3，n4    （把文件1的n1行附加到文件2的n3～n4行后，则二者相同）<br> n1，n2  d  n3    （删除文件1的n1～n2行及文件2的n3行，则二者相同）<br> n1，n2  c  n3，n4 （把文件1的n1～n2行改为文件2的n3～n4行，则二者相同）<br>选项：<br>    -b  忽略空格造成的差别。<br>    -c  输出格式是带上下文的三行格式。<br>    -C n  输出格式是有上下文的n行格式。<br>    -e  输出一个合法的ed脚本。<br>    -i  忽略字母大小写的区别。<br>    -r  当文件1 和文件2都是目录时，递归比较找到的各子目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost test3]# diff log2014.log log2013.log </span><br><span class="line">3c3</span><br><span class="line">&lt; 2014-03</span><br><span class="line">---</span><br><span class="line">&gt; 2013-03</span><br><span class="line">8c8</span><br><span class="line">&lt; 2013-07</span><br><span class="line">---</span><br><span class="line">&gt; 2013-08</span><br><span class="line">11,12d10</span><br><span class="line">&lt; 2013-11</span><br><span class="line">&lt; 2013-12</span><br></pre></td></tr></table></figure>
<p>上面的”3c3”和”8c8”表示log2014.log和log20143log文件在3行和第8行内容有所不同；”11,12d10”表示第一个文件比第二个文件多了第11和12行。<br><strong>c表示不同，d表示多</strong></p>
<h2 id="复制、删除和移动文件的命令"><a href="#复制、删除和移动文件的命令" class="headerlink" title="复制、删除和移动文件的命令"></a>复制、删除和移动文件的命令</h2><h3 id="1．cp命令"><a href="#1．cp命令" class="headerlink" title="1．cp命令"></a>1．cp命令</h3><p><strong>一般格式：cp  [选项]  源文件或目录  目标文件或目录</strong><br>说明：将源文件或目录复制到目标文件或目录中<br>选项：<br>    -a    递归地将源目录下的所有子目录及其文件都复制到目标目录中，并且保留文件链接和文件属性不变。它等效于-dpR。<br>    -d  复制时保留文件链接。<br>    -f，–force   如果现存的目标文件不能打开，则删除它并且重试一次。<br>    -i，–interactive   与-f选项不同，在覆盖目标文件之前先给出提示，要求用户予以确认。回答y，将覆盖目标文件。这是交互式复制。<br>    -p  除复制源文件的内容外，还将其修改时间和存取权限也复制到新文件中。<br>    -R，-r  递归复制目录，即将源目录下的所有文件及其各级子目录都复制到目标位置。<br>    -l  不复制，而是创建指向源文件的链接文件，链接文件名由目标文件给出。<br>例如：<br>cp /bin/?sh . 复制/bin目录下的多个文件到<strong>当前目录</strong><br>cp /bin/cpio mydoc 复制/bin目录下的文件cpio到<strong>mydoc目录</strong>下</p>
<h3 id="2．rm命令"><a href="#2．rm命令" class="headerlink" title="2．rm命令"></a>2．rm命令</h3><p><strong>一般格式： rm  [选项]  文件列表</strong><br>说明：删除文件和目录<br>选项：<br>    -d  删除目录，不管它是否为空（仅超级用户才可使用）。<br>    -f，–force   忽略不存在的文件，并且不给出提示信息。<br>    -r，-R，–recursive   递归地删除指定目录及其下属的各级子目录和相应的文件。<br>    -i  交互式地删除文件。</p>
<p>例如：rm ash 删除一个文件<br>rm .* 删除当前目录下的所有隐含文件<br>rm -r usr/ 删除usr目录及其内容,有删除提示<br>rm -rf usr/ 强制删除usr目录及其内容,无删除提示</p>
<h3 id="3．mv命令"><a href="#3．mv命令" class="headerlink" title="3．mv命令"></a>3．mv命令</h3><p><strong>一般格式： mv  [选项]  source  target</strong><br>说明：对文件或目录<strong>重新命名</strong>，或者将文件从一个目录移到另一个目录中<br>选项：<br> -i，–interactive   交互式操作。如果源文件与目标文件或目标目录中的文件同名，则询问用户是否覆盖目标文件。用户输入“y”，表示将覆盖目标文件；输入“n”，表示取消对源文件的移动。这样可以避免误将文件覆盖。<br> -f    与“-i”相反，它禁止交互式操作。在覆盖已有的目标文件时，不给任何提示。</p>
<p>例如：<br>mv FAQ bash-FAQ 将FAQ文件改名为bash-FAQ<br>mv [yz]* usr/ 将使用通配符指定的多个文件移动到usr目录下<br>注意文件夹有/号</p>
<h2 id="文件内容统计命令"><a href="#文件内容统计命令" class="headerlink" title="文件内容统计命令"></a>文件内容统计命令</h2><h3 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h3><p><strong>一般格式： wc  [选项]  [文件]…</strong><br>说明：统计指定文件的字节数、字数、行数，并将统计结果显示出来<br>选项：<br>    -c，–bytes   统计字节数。<br>    -l，–lines   统计行数。<br>    -w，–words   统计字数。<br>例如：<br>wc nasa.txt<br>wc -l nasa.txt</p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/Linux%E5%AD%A6%E4%B9%A01/%E5%9B%BE%E7%89%871.png" alt=""></p>
<ul>
<li>bin    存放二进制的可执行程序</li>
<li>boot    存放用于系统引导时使用的各种文件</li>
<li>dev    存放设备文件</li>
<li>etc    系统的配置文件</li>
<li>home</li>
<li>root</li>
<li>sbin</li>
<li>tmp    </li>
<li>var    存放需要随时改变的文件，如系统日志、脱机工作目录</li>
<li>mnt    系统管理员安装临时文件系统的安装点</li>
<li>opt    一般情况下，该目录不属于系统的基本文件系统，是额外安装的应用程序包所放置的地方</li>
<li>usr</li>
<li>lib    所需要的共享库及内核模块</li>
<li>proc    是一个虚拟文件系统，存放当前内存的映射，主要用于在不重启机器的情况下管理内核</li>
<li>lost+found</li>
</ul>
<h2 id="改变工作目录和显示目录内容的命令"><a href="#改变工作目录和显示目录内容的命令" class="headerlink" title="改变工作目录和显示目录内容的命令"></a>改变工作目录和显示目录内容的命令</h2><h3 id="1．cd命令"><a href="#1．cd命令" class="headerlink" title="1．cd命令"></a>1．cd命令</h3><p><strong>一般格式：cd  [dirname]</strong><br>说明：改变当前工作目录<br>    它带有唯一的一个参数，即表示目标目录的路径名（相对路径名或绝对路径名）<br>例如：<br>cd ~    切换到用户的私有目录<br>cd /bin    切换进入/bin目录<br>cd ..        返回当前目录的上一级目录</p>
<h3 id="2．pwd命令"><a href="#2．pwd命令" class="headerlink" title="2．pwd命令"></a>2．pwd命令</h3><p>显示出当前工作目录的绝对路径 </p>
<h3 id="3．ls命令"><a href="#3．ls命令" class="headerlink" title="3．ls命令"></a>3．ls命令</h3><p><strong>一般格式：ls  [选项]  [目录或文件]</strong><br>说明：如果给出的参数是目录，该命令将列出其中所有子目录与文件的信息；如果给出的参数是文件，将列出有关该文件属性的一些信息。<br>常用选项：<br> -a，–all     显示指定目录下所有子目录和文件，包括以“.”开头的隐藏文件（如 .cshrc）。<br> -C    分成多列显示各项。<br> -d    如果参数是目录，则只显示它的名字（不显示其内容）。<br> -F，–classify     在列出的文件名后面加上不同的符号，以区分不同类型的文件。可以附加的符号有： /   *   @   |   =<br> -i，–inode      输出的第一列显示文件的I节点号。<br> -l    以长格式显示文件的详细信息。输出的信息依次是：<br>文件类型与权限 链接数 文件主 文件组 文件大小 建立或最近修改的时间 文件名<br> 例如：-rw-r–r–  2  mengqc  group  198  10月 20  2010  csh1 </p>
<h2 id="链接文件的命令"><a href="#链接文件的命令" class="headerlink" title="链接文件的命令"></a>链接文件的命令</h2><h3 id="1．硬链接"><a href="#1．硬链接" class="headerlink" title="1．硬链接"></a>1．硬链接</h3><p>   在另外的目录或本目录中增加目标文件的一个<strong><em>目录项</em></strong>。<br>   有如下限制：不能对目录文件做硬链接；不能在不同的文件系统之间做硬链接<br><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/Linux%E5%AD%A6%E4%B9%A01/%E5%9B%BE%E7%89%872.png" alt=""></p>
<h3 id="2．符号链接"><a href="#2．符号链接" class="headerlink" title="2．符号链接"></a>2．符号链接</h3><p>   也称为软链接，是将一个路径名链接到一个文件（一种特别类型的文件）。 </p>
<p><strong>与硬链接的不同：</strong><br>符号链接确实是一个新文件，它有不同的I<strong>节点号</strong>；而硬链接并没有建立新文件。<br>符号链接没有硬链接的限制，可以对目录文件做符号链接，也可以在不同文件系统之间做符号链接。</p>
<h3 id="3．ln命令"><a href="#3．ln命令" class="headerlink" title="3．ln命令"></a>3．ln命令</h3><p><strong>一般格式：ln  [选项]  源文件  [目标文件]</strong><br>说明：用来创建链接<br>选项：<br>   -s，–symbolic     建立<strong>符号链接</strong>，而不是硬链接。<br>例如：<br>ln cpio edit1 建立cpio的链接文件edit1<br>ln -s mydoc/FAQ/ FAQ</p>
<p>给文件创建软链接，为log2013.log文件创建软链接link2013，如果log2013.log丢失，link2013将失效：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s log2013.log link2013</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost test]# ll</span><br><span class="line">-rw-r--r-- 1 root bin      61 11-13 06:03 log2013.log</span><br><span class="line">[root@localhost test]# ln -s log2013.log link2013</span><br><span class="line">[root@localhost test]# ll</span><br><span class="line">lrwxrwxrwx 1 root root     11 12-07 16:01 link2013 -&gt; log2013.log</span><br><span class="line">-rw-r--r-- 1 root bin      61 11-13 06:03 log2013.log</span><br></pre></td></tr></table></figure>
<p>给文件创建硬链接，为log2013.log创建硬链接ln2013，log2013.log与ln2013的各项<strong>属性相同</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln log2013.log ln2013</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost test]# ll</span><br><span class="line">lrwxrwxrwx 1 root root     11 12-07 16:01 link2013 -&gt; log2013.log</span><br><span class="line">-rw-r--r-- 1 root bin      61 11-13 06:03 log2013.log</span><br><span class="line">[root@localhost test]# ln log2013.log ln2013</span><br><span class="line">[root@localhost test]# ll</span><br><span class="line">lrwxrwxrwx 1 root root     11 12-07 16:01 link2013 -&gt; log2013.log</span><br><span class="line">-rw-r--r-- 2 root bin      61 11-13 06:03 ln2013</span><br><span class="line">-rw-r--r-- 2 root bin      61 11-13 06:03 log2013.log</span><br></pre></td></tr></table></figure>
<p>注意：符号链接文件不是一个独立的文件，它的许多属性依赖于源文件，所以给符号链接文件设置存取权限是没有意义的。<br>软链接相当于快捷方式，是个文件<br>而硬链接相当于在目录项中新增加了项，不是文件</p>
<h2 id="其他常用的文件目录操作命令"><a href="#其他常用的文件目录操作命令" class="headerlink" title="其他常用的文件目录操作命令"></a>其他常用的文件目录操作命令</h2><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>在文本文件中查找指定的字符串<br>grep “nasa” nasa.txt</p>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>在文件系统中查找指定的文件<br>find . -name ‘my<em>‘<br>find my</em> 在当前目录下查找以my开头的文件</p>
<h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h3><p>查找系统文件所在路径<br>whereis tar 查找程序tar的位置</p>
<h2 id="改变文件或目录存取权限的命令"><a href="#改变文件或目录存取权限的命令" class="headerlink" title="改变文件或目录存取权限的命令"></a>改变文件或目录存取权限的命令</h2><h3 id="1．用户和权限"><a href="#1．用户和权限" class="headerlink" title="1．用户和权限"></a>1．用户和权限</h3><p>Linux系统中规定了4种不同类型的用户：<br>① 文件主（owner）；<br>② 同组用户（group）；<br>③ 可以访问系统的其他用户（others）；<br>④ 超级用户（root），具有管理系统的特权。</p>
<p>存取权限规定3种访问文件或目录的方式：<br>① 读（r）<br>② 写（w）<br>③ 可执行或查找（x）<br><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/Linux%E5%AD%A6%E4%B9%A01/%E5%9B%BE%E7%89%873.png" alt=""></p>
<h3 id="2．chmod命令——用于改变或设置文件或目录的存取权限"><a href="#2．chmod命令——用于改变或设置文件或目录的存取权限" class="headerlink" title="2．chmod命令——用于改变或设置文件或目录的存取权限"></a>2．chmod命令——用于改变或设置文件或目录的存取权限</h3><p>（1）以符号模式改变权限 （P.60）<br>一般格式： chmod  key  文件名<br>说明： key 由以下三部分组成：[who]  [操作符号]  [mode]<br>操作对象who可以是下述字母中的任一个或者它们的组合：<br>         u    g    o    a<br>   操作符号可以是： +    -     =<br>   <strong>+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限</strong><br>   操作方式mode所表示的权限可用下述字母的任意组合：<br>    r     w    x     X      s      t    </p>
<p>将文件 file1.txt 设为所有人皆可读取 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod ugo+r file1.txt</span><br></pre></td></tr></table></figure>
<p>将文件 file1.txt 设为所有人皆可读取 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod a+r file1.txt</span><br></pre></td></tr></table></figure>
<p>（2）以绝对方式改变权限<br>一般格式： chmod  mode  文件名<br>mode是以3位八进制数字出现的，第一位表示文件主权限，第二位表示组用户权限，第三位表示其他用户权限 </p>
<p>语法为：<br>chmod abc file<br>其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。</p>
<p>r=4，w=2，x=1<br>若要rwx属性则4+2+1=7；<br>若要rw-属性则4+2=6；<br>若要r-x属性则4+1=5。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 777 file</span><br></pre></td></tr></table></figure>
<p><strong>若用chmod 4755 filename可使此程序具有root的权限</strong></p>
<h3 id="3．umask命令"><a href="#3．umask命令" class="headerlink" title="3．umask命令"></a>3．umask命令</h3><p>一般格式： umask   mode<br>说明：用来设置限制新建文件权限的掩码。<br>示例：  umask   u=，g=w，o=rwx<br>应注意：操作符“=”在umask命令和chmod命令中的作用恰恰相反。 </p>
<p>检查新创建文件的默认权限<br>umask  -S<br>选项-S表示以字符形式显示当前的掩码。  </p>
<h2 id="改变用户组和文件组的命令"><a href="#改变用户组和文件组的命令" class="headerlink" title="改变用户组和文件组的命令"></a>改变用户组和文件组的命令</h2><h3 id="1．chgrp命令"><a href="#1．chgrp命令" class="headerlink" title="1．chgrp命令"></a>1．chgrp命令</h3><p><strong>一般格式： chgrp  [选项]  组名  文件名</strong><br>说明：该命令用来改变指定文件所属的用户组<br>常用选项：<br>    -R，–recursive   递归式地改变指定目录及其下面的所有子目录和文件的用户组。</p>
<h3 id="2．chown命令"><a href="#2．chown命令" class="headerlink" title="2．chown命令"></a>2．chown命令</h3><p><strong>一般格式： chown  [选项]  用户或组  文件名</strong><br>说明：改变某个文件或目录的所有者和所属的组<br>选项：<br> -R，–recursive     递归式地改变指定目录及其所有子目录、文件的文件主。<br> -v，–verbose     详细列出该命令所做的工作</p>
<h2 id="联机帮助命令"><a href="#联机帮助命令" class="headerlink" title="联机帮助命令"></a>联机帮助命令</h2><h3 id="man命令-info命令"><a href="#man命令-info命令" class="headerlink" title="man命令/info命令"></a>man命令/info命令</h3><p>*<em>一般格式： man/info  [选项]  命令名  *</em><br>说明：格式化并显示某一命令的联机帮助手册页<br>选项：<br>    -M 路径  指定查找man手册页的路径。<br>    -P 命令  指定显示手册所使用的分页程序。默认使用“/usr/bin/less-is”。<br>    -S 章节  指定查找手册页的章节列表。<br>    -a  显示所有的手册页，而不是只显示第一处找到的。<br>    -d  主要在检查时使用。如果用户加入了新的手册页，就可以用这个选项检查手册页的安装情况。这个选项并不显示手册页的内容。<br>    -D  既显示手册页内容，也显示检查信息。<br>    -f  只显示出命令的功能而不显示其中详细的说明文件。<br>    -w，–path   不显示手册页，只显示将被格式化和显示的文件所在的位置。  </p>
<h3 id="help命令"><a href="#help命令" class="headerlink" title="help命令"></a>help命令</h3><p><strong>一般格式：help  命令</strong><br>说明：用来查看所有shell内置命令的帮助信息。<br>    有些命令构造在shell内部，从而在shell环境内部执行。这种命令称为shell内置命令（也称为内部命令）。 </p>
<h2 id="有关进程管理的命令"><a href="#有关进程管理的命令" class="headerlink" title="有关进程管理的命令"></a>有关进程管理的命令</h2><h3 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h3><p><strong>一般格式：ps  [选项]</strong><br>说明：ps命令是查看进程状态的最常用的命令，它可以提供关于进程的许多信息。<br>常用选项：<br> -a  显示系统中与tty相关的（除会话组长之外）所有进程的信息。<br> a   BSD风格。显示系统中与终端tty相关的所有进程的信息；当与选项x一起使用时，显示所有进程的信息。<br> -e  显示所有进程的信息。<br> -f  显示进程的所有信息。<br> -l  以长格式显示进程信息。<br> r   只显示正在运行的进程。<br> u   显示面向用户的格式（包括用户名、CPU及内存使用情况等信息）。<br> x   BSD风格。显示所有非控制终端上的进程信息 ；当与选项a一起使用时，显示所有进程的信息。  </p>
<h3 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h3><p><strong>一般格式：kill  [-s  信号|-p ] [-a] 进程号…</strong><br>            kill  -l [信号]<br>说明：通过向进程发送指定的信号来结束相应进程的运行<br>选项：<br> -s  指定需要发送的信号，既可以是信号名（如kill），也可以是对应信号的号码（如9）。<br> -p  指定kill命令只是显示进程的PID（进程标志号），并不真正发出结束信号。<br> -l  显示信号名称列表，这也可以在/usr/include/linux/signal.h文件中找到。<br>例如：<br>kill 2277<br>kill -9 2277<br>killall -9 cat</p>
<h2 id="其他作业控制命令"><a href="#其他作业控制命令" class="headerlink" title="其他作业控制命令"></a>其他作业控制命令</h2><h3 id="sleep命令"><a href="#sleep命令" class="headerlink" title="sleep命令"></a>sleep命令</h3><p>一般格式：sleep  时间值<br>说明：“时间值”参数以秒为单位，即让进程暂停由时间值所指定的秒数。<br>cmd &amp;  将该命令放到后台运行<br>&lt;Ctrl+D&gt; 正常终止正在前台运行的一个进程<br>&lt;Ctrl+C&gt; 强行终止正在前台运行的一个进程<br>&lt;Ctrl+Z&gt; 挂起一个正在前台运行的进程<br>jobs 显示后台作业和被挂起的进程<br>bg  在后台恢复运行一个被挂起的进程<br>fg  在前台恢复运行一个被挂起的进程</p>
<h2 id="进程控制举例"><a href="#进程控制举例" class="headerlink" title="进程控制举例"></a>进程控制举例</h2><p>假设当前以root用户登录字符界面，Shell为bash。首先，请显示当前运行的进程。接下来，创建一个后台睡眠进程，让它睡眠1000秒，并在它运行结束前将它挂起。然后，再使用cat命令创建一个进程，使它接受从终端输入的字符并保存至文件example中。输入“This is a example”后， 挂起该进程。现在，请显示被挂起的进程，并将名为cat的进程调度到前台并完成输入，将名为sleep的进程杀死。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps</span><br><span class="line">sleep 1000s</span><br><span class="line">按下Ctrl+Z，挂起sleep进程</span><br><span class="line">cat &gt; example	</span><br><span class="line">在终端输入“This is a example”,然后按下 Ctrl+Z, 挂起cat进程	</span><br><span class="line">jobs	</span><br><span class="line">fg cat</span><br><span class="line">按下Ctrl+D，正常结束cat命令</span><br><span class="line">运行ps，得到sleep进程的pid，假设为8172</span><br><span class="line">kill -9 8172</span><br></pre></td></tr></table></figure>

<h2 id="文件压缩和解压缩命令"><a href="#文件压缩和解压缩命令" class="headerlink" title="文件压缩和解压缩命令"></a>文件压缩和解压缩命令</h2><h3 id="gzip命令"><a href="#gzip命令" class="headerlink" title="gzip命令"></a>gzip命令</h3><p><strong>一般格式：  gzip  [选项] [name…]</strong><br>说明：用来对文件进行压缩和解压缩。<br>选项：<br> -c,–stdout,–to-stdout  将输出写到标准输出上,并保留原有文件。<br> -d,–decompress,–uncompress    将被压缩的文件进行解压缩。<br> -l,–list    对每个压缩文件,列出以下字段:<br>         compressed  size:  压缩文件的大小<br>         uncompressed  size:  未压缩文件的大小<br>         ratio :  压缩比(未知时为0.0%)<br>         uncompressed_name:  未压缩文件的名字<br> -r    递归地查找指定目录并压缩其中的所有文件或者是解压缩。<br> -t    测试,即检查压缩文件的完整性。<br> -v    对每个压缩文件和解压缩文件,显示其文件名和压缩比。<br> -num    用指定的数字num调整压缩速度,其中-1或–fast表示最快的压缩方法(低压缩比),-9或–best表示最慢的压缩方法(高压缩比) 。系统默认值为-6。 </p>
<h3 id="unzip命令"><a href="#unzip命令" class="headerlink" title="unzip命令"></a>unzip命令</h3><p><strong>一般格式：  unzip  [选项] 被压缩文件名</strong><br>说明:对ZIP格式的压缩文件进行解压缩。<br>选项：<br> -x   文件列表  解压缩文件,但对文件列表中所指定的文件并不做解压缩。<br> -v   如果没有给出压缩文件名，则只显示有关unzip的诊断信息，如该工具的发行日期、版本、特殊编译选项等；如果其后带有压缩文件名，且没有其它选项，则列出压缩文件的有关信息,但不做解压缩。<br> -t   检查压缩文件的完整性。<br> -d  目录    把压缩文件解压缩后放到指定的目录中。<br> -z    只显示压缩文件的注释。<br> -n    不覆盖已经存在的文件。<br> -o    允许覆盖已经存在的文件。<br> -j    废除压缩文件原来的目录结构,将所有文件解压缩之后放到同一目录之下。</p>
<h3 id="备份压缩命令"><a href="#备份压缩命令" class="headerlink" title="备份压缩命令"></a>备份压缩命令</h3><p>tar 文件,目录打/解包</p>
<h4 id="tar命令举例"><a href="#tar命令举例" class="headerlink" title="tar命令举例"></a>tar命令举例</h4><p>tar -zcvf myusr.tar.gz mydoc 将mydoc目录打包后压缩,调用gzip压缩工具<br>tar -zxvf myusr.tar.gz 解压<br>tar -Zcvf myusr.tar.Z mydoc 将mydoc目录打包后压缩,调用compress压缩工具<br>tar -Zxvf myusr.tar.Z<br>tar -jcvf myusr.tar.bz2 mydoc<br>tar -jxvf myusr.tar.bz2</p>
<p>gzip 压缩或解压文件目录,后缀为gz<br>compress 压缩或解压文件目录,后缀为Z<br>bzip2 压缩或解压文件目录,后缀为bz2<br>zcat 显示压缩的文本文件的内容</p>
<h2 id="有关DOS命令"><a href="#有关DOS命令" class="headerlink" title="有关DOS命令"></a>有关DOS命令</h2><p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/Linux%E5%AD%A6%E4%B9%A01/%E5%9B%BE%E7%89%874.png" alt=""></p>
<h2 id="文件系统挂载和解挂命令"><a href="#文件系统挂载和解挂命令" class="headerlink" title="文件系统挂载和解挂命令"></a>文件系统挂载和解挂命令</h2><h3 id="mount命令：挂载文件系统"><a href="#mount命令：挂载文件系统" class="headerlink" title="mount命令：挂载文件系统"></a>mount命令：挂载文件系统</h3><p>mount -o uft8 /dev/sda1 /mnt/usb (挂载优盘)<br>mount -o loop linuxsetup.iso /mnt/iso (挂载ISO文件)<br>mount /dev/hdc /mnt/cdrom –o iocharset= cp936 (中文挂载光驱)</p>
<h3 id="umount-命令：解挂文件系统"><a href="#umount-命令：解挂文件系统" class="headerlink" title="umount 命令：解挂文件系统"></a>umount 命令：解挂文件系统</h3><p>umount /mnt/usb</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>git的使用方法</title>
    <url>/2020/03/07/git%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="Git的使用"><a href="#Git的使用" class="headerlink" title="Git的使用"></a>Git的使用</h1><p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/p2577152397.webp" alt=""><br>前言：<br>    简要介绍了git的使用方法</p>
<a id="more"></a>

<p>输入 git init （如果为第一次，就输入该命令初始化目录，否则可直接跳过）</p>
<p>输入 git add -A</p>
<p>输入 git commit -m “备注说明”（提交至本地仓库，并简单说明）</p>
<p>输入 git remote add origin ssh://XXXXXXXXXXXXX.git (如果为第一次使用需要重定向提交的路径)</p>
<p>输入 git push -u origin master（提交至远程仓库）</p>
<blockquote>
<p>转载：<a href="https://www.cnblogs.com/NamingException/p/10853758.html" target="_blank" rel="noopener">https://www.cnblogs.com/NamingException/p/10853758.html</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>android学习1</title>
    <url>/2020/03/05/android%E5%AD%A6%E4%B9%A01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="Android-Studio下的APP目录结构"><a href="#Android-Studio下的APP目录结构" class="headerlink" title="Android Studio下的APP目录结构"></a>Android Studio下的APP目录结构</h1><p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/100.jfif" alt=""></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​        一个AS（全称Android Studio）项目由通常由<strong>应用程序模块和库模块</strong>组成，应用程序模块是可以单独的运行的，而库模块只能够依附于应用程序模块才能够运行，自己是无法独立运行的；</p>
<p>​        库模块也是有res、java、AndroidManifest文件的，和应用程序模块很像。</p>
<a id="more"></a>

<p>​        两者主要的区别在于库模块内的 build.gradle 文件是标记为 <strong>library</strong> 类型的，而应用程序模块内的 build.gradle 文件标记为 <strong>application</strong> 的。</p>
<hr>
<h3 id="Project-模式下的结构"><a href="#Project-模式下的结构" class="headerlink" title="Project 模式下的结构"></a>Project 模式下的结构</h3><p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/project.jpg" alt="Project"></p>
<p>1、.gradle和.idea</p>
<p>​        这两个目录下放置的都是Android Studio自动生成的一些文件。<br>2、app </p>
<p>​        项目中的代码、资源等内容几乎都是放置在这个目录下的。<br>3、build </p>
<p>​        主要包含了一些在编译时自动生成的文件。</p>
<p>4、gradle </p>
<p>​        这个目录下包含了gradle wrapper的<strong>配置文件</strong>，使用gradle wrapper的方式不需要提前将gradle下载好，而是会自动根据本地的缓存情况决定是否需要联网下载gradle。Android Studio默认没有启动gradle wrapper的方式，如果需要打开，可以点击Android Studio导航栏 –&gt; File –&gt; Settings –&gt; Build，Execution，Deployment –&gt; Gradle，进行配置更改。<br>5、.gitignore </p>
<p>​        这个文件是用来将指定的目录或文件<strong>排除在版本控制之外</strong>的。</p>
<p>6、build.gradle</p>
<p>​        这是项目全局的gradle构建<strong>脚本</strong>。<br>7、gradle.properties</p>
<p>​        这个文件是全局的gradle<strong>配置文件</strong>，在这里配置的属性将会影响到项目中所有的gradle编译脚本。<br>8、gradlew和gradlew.bat</p>
<p>​        这两个文件是用来在命令行界面中执行gradle命令的，其中gradlew是在Linux或Mac系统中使用的，gradlew.bat是在Windows系统中使用的。</p>
<p>9、MyHello.iml </p>
<p>​        iml 文件是用于标识这是一个IntelliJ IDEA项目。<br>10、local.properties</p>
<p>​        这个文件用于指定本机中的Android SDK路径，通常内容都是自动生成的，我们并不需要修改。除非你本机中的Android SDK位置发生了变化，那么就将这个文件中的路径改成新的位置即可。<br>11、settings.gradle </p>
<p>​        这个文件用于<strong>指定项目中所有引入的模块</strong>。<br>12、app （ module ）目录结构</p>
<h3 id="module的结构"><a href="#module的结构" class="headerlink" title="module的结构"></a>module的结构</h3><p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/app.jpg" alt="app"></p>
<p>​    1、build</p>
<p>​        这个目录和外层的 build 目录类似，主要也是包含了一些在编译时自动生成的文件，不过它里面的内容会更多更杂，我们不需要过多关心。<br>​    2、libs </p>
<p>​        如果你的项目中使用到了第三方 jar 包，就需要把这些jar包都放在 libs 目录下，放在这个目录下的jar包都会被自动添加到构建路径里去。</p>
<p>​    3、src/AndroidTest</p>
<p>​        此处是用来编写 Android Test 测试用例的，可以对项目进行一些自动化测试。<br>​    4、src/main/java</p>
<p>​        java目录是放置我们所有 java 代码的地方。<br>​    5、src/main/res</p>
<p>​        这个目录下的内容就有点多了。简单点说，就是你在项目中使用到的所有图片，布局，字符串等资源都要存放在这个目录下。当然这个目录下还有很多子目录，<strong>图片放在 drawable 目录下，布局放在 layout 目录下，字符串放在 values 目录下，以mipmap 开头的文件夹都是用来放应用图标的</strong>。</p>
<p>​    6、main/AndroidManifest.xml </p>
<p>​        这是你整个 Android 项目的配置文件，<strong>你在程序中定义的所有四大组件都需要在这个文件里注册</strong>，另外还可以在这个文件中<strong>给应用程序添加权限声明</strong>。<br>​    7、test</p>
<p>​        此处是用来编写 Unit Test 测试用例的，是对项目进行自动化测试的另一种方式。<br>​    8、.gitignore</p>
<p>​        这个文件用于将 app<strong>模块</strong>内的指定的目录或文件排除在版本控制之外，作用和外层的 .gitignore 文件类似。</p>
<p>​    9、app.iml </p>
<p>​        IntelliJ IDEA 项目自动生成的文件。<br>​    10、build.gradle </p>
<p>​        这是 app 模块的 gradle 构建<strong>脚本</strong>，这个文件中会指定很多项目构建相关的配置。<br>​    11、proguard-rules.pro</p>
<p>​        这个文件用于指定项目代码的混淆规则，当代码开发完成后打成安装包文件，如果不希望代码被别人破解，通常会将代码混淆，从而让破解者难以阅读。</p>
<hr>
<h3 id="build-gradle-文件解析"><a href="#build-gradle-文件解析" class="headerlink" title="build.gradle 文件解析"></a>build.gradle 文件解析</h3><p>Android Studio 工程根目录下的 build.gradle 通常不需要修改这个文件中的内容，除非需要添加一些全局的项目构建配置。<br>APP（模块）目录下的 build.gradle 文件是 app（这里是 moduletwo） 模块的 gradle 构建脚本，<strong>一般用来管理 app （这里是 moduletwo）包名、版本以及添加和修改依赖库</strong>。</p>
<h4 id="工程中根路径下的-build-gradle-文件"><a href="#工程中根路径下的-build-gradle-文件" class="headerlink" title="工程中根路径下的 build.gradle 文件"></a>工程中根路径下的 build.gradle 文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()  <span class="comment">//声明代码托管仓库Google</span></span><br><span class="line">        jcenter() <span class="comment">//指定代码的托管仓库为 jcenter        </span></span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        <span class="comment">//声明 gradle的构建版本，</span></span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:3.1.4'</span></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()   <span class="comment">//Jar下载的仓库中心</span></span><br><span class="line">        jcenter()  <span class="comment">//Jar下载的仓库中心</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开启一个任务，指定每次编译都要清空工程</span></span><br><span class="line"><span class="function">task <span class="title">clean</span><span class="params">(type: Delete)</span> </span>&#123;</span><br><span class="line">    delete rootProject.buildDir</span><br></pre></td></tr></table></figure>



<h4 id="某个-Module（模块）中的-build-gradle-文件"><a href="#某个-Module（模块）中的-build-gradle-文件" class="headerlink" title="某个 Module（模块）中的 build.gradle 文件"></a>某个 Module（模块）中的 build.gradle 文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span> <span class="comment">//表示是一个应用程序的模块，可独立运行</span></span><br><span class="line"><span class="comment">//apply plugin: 'com.android.library' //表示是一个依赖库，不能独立运行</span></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">25</span>        <span class="comment">//指定项目的编译版本</span></span><br><span class="line">    buildToolsVersion <span class="string">"25.0.1“  //指定项目构建工具的版本</span></span><br><span class="line"><span class="string">    defaultConfig &#123;</span></span><br><span class="line"><span class="string">        applicationId "</span>com.hhqy.learnndk2<span class="string">" //指定包名</span></span><br><span class="line"><span class="string">        minSdkVersion 14        //指定最低的兼容的Android系统版本</span></span><br><span class="line"><span class="string">        targetSdkVersion 25     //指定你的目标版本，表示你在该Android系统版本已经做过充分的测试</span></span><br><span class="line"><span class="string">        versionCode 1           //版本号</span></span><br><span class="line"><span class="string">        versionName "</span><span class="number">1.0</span><span class="string">"       //版本名称</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    buildTypes &#123; //指定生成安装文件的配置，常有两个子包:release,debug，注：直接运行的都是debug安装文件</span></span><br><span class="line"><span class="string">        release &#123; //用于指定生成正式版安装文件的配置</span></span><br><span class="line"><span class="string">            minifyEnabled false     //指定是否对代码进行混淆，true表示混淆</span></span><br><span class="line"><span class="string">            //指定混淆时使用的规则文件，proguard-android.txt指所有项目通用的混淆规则，</span></span><br><span class="line"><span class="string">	 //proguard-rules.pro当前项目特有的混淆规则</span></span><br><span class="line"><span class="string">            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'</span></span><br><span class="line"><span class="string">dependencies &#123; //指定当前项目的所有依赖关系：本地依赖、库依赖、远程依赖</span></span><br><span class="line"><span class="string">    compile fileTree(dir: 'libs', include: ['*.jar'])//本地依赖</span></span><br><span class="line"><span class="string">    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', &#123;</span></span><br><span class="line"><span class="string">        exclude group: 'com.android.support', module: 'support-annotations'</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> ‘  //远程依赖，com.android.support是域名部分，appcompat-v7是组名称，25.0.1是版本号</span></span><br><span class="line"><span class="string">    compile 'com.android.support:appcompat-v7:25.0.1</span></span><br><span class="line"><span class="string">    compile project(':hello')//库依赖</span></span><br><span class="line"><span class="string">    testCompile ‘junit:junit:4.12’  //声明测试用例库</span></span><br><span class="line"><span class="string">    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha7'</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>js学习1</title>
    <url>/2020/03/04/js%E5%AD%A6%E4%B9%A01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js"></script><h1 id="JS的一些问题"><a href="#JS的一些问题" class="headerlink" title="JS的一些问题"></a>JS的一些问题</h1><p><img data-src="https://cdn.jsdelivr.net/gh/zhuofan777/cdn/p2577152401.webp" alt=""></p>
<h2 id="javascript中的变量作用域"><a href="#javascript中的变量作用域" class="headerlink" title="javascript中的变量作用域"></a>javascript中的变量作用域</h2><p>js中全局作用域分为两种，局部变量和全局变量。<br>局部变量的作用范围是变量所在的函数。<br>例如：</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Uncaught ReferenceError: a is not defined</span><br></pre></td></tr></table></figure>
<p>全局变量定义在函数外，它的作用域是整个代码片段。如果在函数中存在相同命名的局部变量，则在函数中全局变量的值无效，使用局部变量的值。<br>例如下面第一段代码在函数中变量前加var，那么此变量就是新的<strong>局部变量</strong>，即使名称相同也不会影响到先前同名的全局变量。而如果变量前没有var，则默认为全局变量，如第二段。</p>
<p>代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="javascript中的this"><a href="#javascript中的this" class="headerlink" title="javascript中的this"></a>javascript中的this</h2><blockquote>
<p>1.在方法中，this 表示该方法所属的对象。<br>2.如果单独使用，this 表示全局对象。<br>3.在函数中，this 指向函数的所属者。<br>4.在函数中，在严格模式下，this 是未定义的(undefined)。<br>5.在事件（HTML 事件句柄）中，this 表示接收事件的元素。<br>6.类似 call() 和 apply() 方法允许切换函数执行的上下文环境（context），可以将 this 引用到任何对象。<br><a href="https://www.runoob.com/js/js-this.html" target="_blank" rel="noopener" >–摘录自菜鸟教程</a></p>
</blockquote>
<hr>
<p>除了上述的情况外，还有一种情况。下面不考虑nodejs环境，在浏览器环境中，进行对每种情况解释。</p>
<p> 1.在方法中，this 表示该方法所属的对象。<br> 如下面代码所示，this在cout（）方法中代表的就是cout（）方法所属的对象student。</p>
<p>代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">  name: <span class="string">"ming"</span>,</span><br><span class="line">  id : <span class="string">"17274000"</span>,</span><br><span class="line">  cout : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">"'s id is "</span> + <span class="keyword">this</span>.id;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="built_in">console</span>.log(student.cout());</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ming&#39;s id is 17274000</span><br></pre></td></tr></table></figure>
<p>2.如果单独使用，this 表示全局对象。<br>单独使用就是指不在函数方法或是HTML代码中，此时this就是代指浏览器window。</p>
<p>代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">this</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a===<span class="built_in">window</span>);</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a,<span class="built_in">window</span>.a);</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure>


<p>3.在函数中，this 指向函数的所属者。<br>而浏览器中函数的所属者还是window，所以this还是等于window。</p>
<p>代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(myFunction()===<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure>
<p>4.在函数中，在严格模式下，this 是未定义的(undefined)。<br>严格模式不允许这样使用，所以返回undefined。</p>
<p>代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(myFunction());</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">undefined</span><br></pre></td></tr></table></figure>
<p>5.在事件（HTML 事件句柄）中，this 表示接收事件的元素。<br>如代码所示，this代指的是接收事件的button元素，于是执行了display=‘none’的操作。</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"this.style.display='none'"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">按钮消失了</span><br></pre></td></tr></table></figure>
<p>6.类似 call() 和 apply() 方法允许切换函数执行的上下文环境（context），可以将 this 引用到任何对象。<br>如下所示，this代指了student2对象，利用student1的方法输出了student2.</p>
<p>代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> student1 = &#123;</span><br><span class="line">	name: <span class="string">"hong"</span>,</span><br><span class="line">	id: <span class="string">"17274010"</span>,</span><br><span class="line">	cout: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">"'s id is "</span> + <span class="keyword">this</span>.id;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> student2 = &#123;</span><br><span class="line">	name: <span class="string">"ming"</span>,</span><br><span class="line">	id: <span class="string">"17274000"</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = student1.cout.call(student2);</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ming&#39;s id is 17274000</span><br></pre></td></tr></table></figure>
<p>7.构造函数中的this<br>虽然js中的构造函数只是被new操作符调用的普通函数，但是它却免去了return this的烦恼。this绑定到了当前的对象。<br><a name="top"></a><br>代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.hello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello, '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">'小明'</span>);</span><br><span class="line">xiaoming.name;</span><br><span class="line">xiaoming.hello();</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello, 小明!</span><br></pre></td></tr></table></figure>

<blockquote>
<p>优先级 <strong>new &gt; 显式 &gt; 隐式 &gt; 默认</strong><br>判断this的方法如下：<br>&lt;1&gt; 函数是否在new中调用（new绑定）？<br>&lt;2&gt;函数是否通过call、apply（显式绑定）或者bind（硬绑定）调用？<br>&lt;3&gt; 函数是否在某个上下文对象中调用（隐式绑定）？<br>&lt;4&gt;如果都不是的话，使用的默认绑定。如果在严格模式下，就绑定到undefined，否则绑定到全局对象。<br><a href='https://www.liaoxuefeng.com/wiki/1022910821149312/1023022126220448' target="_blank" rel="noopener">–摘录自csdn</a></p>
</blockquote>
<hr>
<h2 id="javascript中的面向对象跟其他面向对象程序设计语言，比如java有什么不同"><a href="#javascript中的面向对象跟其他面向对象程序设计语言，比如java有什么不同" class="headerlink" title="javascript中的面向对象跟其他面向对象程序设计语言，比如java有什么不同"></a>javascript中的面向对象跟其他面向对象程序设计语言，比如java有什么不同</h2><blockquote>
<p>类和实例是大多数面向对象编程语言的基本概念。不过，在JavaScript中，这个概念需要改一改。JavaScript<strong>不区分类和实例的概念</strong>，而是通过<strong>原型</strong>（prototype）来实现面向对象编程。<br><a href='https://www.liaoxuefeng.com/wiki/1022910821149312/1023022126220448' target="_blank" rel="noopener">–摘录自廖雪峰的官方网站</a></p>
</blockquote>
<p>js最显著的特点就是没有类。下面简单解释由于没有类js如何实现面向对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Student = &#123;</span><br><span class="line">    name: <span class="string">'Robot'</span>,</span><br><span class="line">    height: <span class="number">1.2</span>,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' is running...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.__proto__ = Student;</span><br></pre></td></tr></table></figure>
<p>小明这个对象是从 Student继承而来的，他可以使用Student的run()方法。<br>但是js中的继承<strong>只是一个对象的原型指向另一个对象</strong>。也就是说对象的原型指向其他对象就可以变成任何对象的“子类”。通过如下的操作，重新为小明指定原型。所以可见js和其他面向对象语言<strong>继承</strong>方式由很大不同。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xiaoming.__proto__ = Bird;</span><br></pre></td></tr></table></figure>
<p>这样后xiaoming就成了Bird。<br><em>实际情况可以使用Object.create()方法传入一个原型对象</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="built_in">Object</span>.create(Student);</span><br></pre></td></tr></table></figure>
<p>除了上面的构造方法外，还可以使用<a href="#top">上文</a>提及的构造函数new来创建新的对象。<br>这里的<strong>new</strong>是第二处明显的不同。由于没有类，所以是对象直接绑定对象。而实质上，js这里仅仅是借用了关键字 new，仅此而已；换句话说，ECMA 完全可以用其它非new 表达式来用调用构造器创建对象。</p>
<p><a href="https://blog.csdn.net/fhjdzkp/article/details/79707749" target="_blank" rel="noopener">一个形象的解释</a></p>
<p>在 ES6 规范中，引入了 class 的概念。但是js 中任然并没有一个真正的 class 原始类型，class实则还是一个函数，它的原理还是是<strong>原型继承</strong>。</p>
<hr>
<h2 id="javascript中的闭包怎么理解"><a href="#javascript中的闭包怎么理解" class="headerlink" title="javascript中的闭包怎么理解"></a>javascript中的闭包怎么理解</h2><blockquote>
<p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。<br><a href='https://www.liaoxuefeng.com/wiki/1022910821149312/1023022126220448' target="_blank" rel="noopener">–摘录自廖雪峰的官方网站</a></p>
</blockquote>
<hr>
<p>闭包就是一种程序结构。高阶函数返回了一个函数，这样的返回内部的函数中就可能会包含外部函数的相关参数和变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazy_sum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上所示，lazy_sum它返回求和的结果是function sum（），作为一般的函数返回后与原函数就没关系，但是现在它的arr还是被新函数继续使用。<br><strong>换句话说就是返回的函数携带了某个值，这个值可以看成是私有变量，外部可以通过调用这个返回的函数来获取这个值。</strong><br>利用闭包原理可以写出计数器：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> add = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;<span class="comment">//外部访问的计数器，局部变量.</span></span><br><span class="line">    <span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fun;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考<br>CSDN，廖雪峰的官方网站，菜鸟教程</p>
</blockquote>
]]></content>
      <tags>
        <tag>js</tag>
        <tag>卓越工程</tag>
      </tags>
  </entry>
</search>
